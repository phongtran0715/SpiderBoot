
//IDL for java server side
module SpiderDownloadApp
{
  interface SpiderFootSide
  {
        boolean createMappingChannel(in long timerId, in wstring cHomeId, in wstring cMonitorId, in wstring downloadClusterId, in long timerInterval );
        boolean modifyMappingChannel(in long timerId, in wstring cHomeId, in wstring cMonitorId, in wstring downloadClusterId, in long timerInterval, in long synStatus);
        boolean deleteMappingChannel(in long timerId, in wstring downloadClusterId);

  };
};

module SpiderRenderApp
{
  interface SpiderFootSide
  {
        struct RenderInfo
        {
            long jobId;
            wstring videoId;
            wstring vIntro;
            wstring vOutro;
            wstring vLogo;
            boolean enableIntro;
            boolean enableOutro;
            boolean enableLogo;
            wstring vLocation;
        };

        boolean createRenderJob(in RenderInfo vInfo);
        boolean deleteRenderJob(in wstring renderClusterId, in long jobId);
        void deleteRenderdVideo(in wstring renderClusterId, in wstring vLocation);
  };
};

module SpiderUploadApp
{
  interface SpiderFootSide
  {
        struct UploadInfo
        {
            long jobId;
            wstring videoId;
            wstring vTitle;
            wstring vDesc;
            wstring vTags;
            wstring vThumbnail;
            wstring vLocation;
            boolean enableTitle;
            boolean enableDes;
            boolean enableTags;
            long mappingId;
        };
        boolean createUploadJob(in UploadInfo vInfo);
        boolean deleteUploadJob(in wstring uploadClusterId, in long jobId);
  };
};
//IDL for C++ server side

module SpiderAgentApp
{
  interface AgentSide
  {
    struct AuthenInfo
    {
      wstring userName;
      wstring apiKey;
      wstring clientSecret;
      wstring clientId;
    };

    struct ClusterInfo
    {
      wstring clusterIp;
      wstring userName;
      wstring password;
    };

    struct VideoInfo {
      wstring videoId;
      wstring title;
      wstring tags;
      wstring description;
      wstring thumbnail;
      wstring vDownloadPath;
      wstring vRenderPath;
      long mappingId;
      long processStatus;
      long license;
    };

    void onDownloadStartup(in wstring appId);
    void onRenderStartup(in wstring appId);
    void onUploadStartup(in wstring appId);

    long long getLastSyncTime(in long mappingId);
    void updateLastSyntime(in long mappingId, in long long lastSyncTime);

    void updateDownloadedVideo(in VideoInfo vInfo);
    void updateRenderedVideo(in long jobId, in long processStatus, in wstring vRenderPath);
    void updateUploadedVideo (in long jobId);
    wstring getMonitorChannelId(in long mappingId);
    ClusterInfo getClusterInfo(in long clusterType, in long mappingId);
    AuthenInfo getAuthenInfo(in long mappingId);
  };
};
