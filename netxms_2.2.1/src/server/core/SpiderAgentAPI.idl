module SpiderCorba
{
  interface SpiderDefine
  {
     struct VideoInfo
     {
          wstring videoId;
          wstring title;
          wstring tags;
          wstring description;
          wstring thumbnail;
          wstring vDownloadPath;
          wstring vRenderPath;
          long mappingId;
          long mappingType;
          long processStatus;
          long license;
    };

    struct DownloadConfig
    {
            wstring cHomeId;
            wstring cMonitorId;
            wstring downloadClusterId;
            long timerInterval;
            long synStatus;
    };

    struct RenderConfig
    {
            wstring vIntroTemp;
            wstring vOutroTemp;
            wstring vLogoTemp;
            boolean enableIntro;
            boolean enableOutro;
            boolean enableLogo;
    };

    struct UploadConfig
    {
            wstring vTitleTemp;
            wstring vDescTemp;
            wstring vTagsTemp;
            boolean enableTitle;
            boolean enableDes;
            boolean enableTags;
    };

    struct AuthenInfo
    {
            wstring userName;
            wstring apiKey;
            wstring clientSecret;
            wstring clientId;
    };

    struct ClusterInfo
    {
            wstring clusterIp;
            wstring userName;
            wstring password;
    };
  };

  interface DownloadSide : SpiderDefine
  {
        boolean createDownloadTimer(in long timerId, in long timerType, in DownloadConfig downloadCfg);
        boolean modifyDownloadTimer(in long timerId, in long timerType, in DownloadConfig downloadCfg);
        boolean deleteDowloadTimer(in long timerId, in long timerType);
        boolean deleteDownloadedVideo(in long jobId);
  };

  interface RenderSide : SpiderDefine
  {
        boolean createRenderJob(in long jobId, in VideoInfo vInfo);
        boolean deleteRenderJob(in long jobId);
        void deleteRenderdVideo(in wstring vLocation);
  };

  interface UploadSide : SpiderDefine
  {
        boolean createUploadTimer(in long timerId, in long timerType);
        boolean deleteUploadTimer(in long timerId, in long timerType);
        boolean createUploadJob(in long jobId, in VideoInfo vInfo);
  };

  interface AgentSide : SpiderDefine
  {
      //Download app function
      void onDownloadStartup(in wstring downloadClusterId);
      long long getLastSyncTime(in long mappingId, in long mappingType);
      void updateLastSyntime(in long mappingId, in long mappingType, in long long lastSyncTime);
      void updateDownloadedVideo(in VideoInfo vInfo);

      //Render app function
      void onRenderStartup(in wstring renderClusterId);
      RenderConfig getRenderConfig(in long mappingId, in long mappingType);
      void updateRenderedVideo(in long jobId, in VideoInfo vInfo);

      //Upload app function
      void onUploadStartup(in wstring uploadClusterId);
      UploadConfig getUploadConfig(in long mappingId, in long mappingType);
      void updateUploadedVideo (in long jobId);

      //Other function
      AuthenInfo getAuthenInfo(in long mappingId, in long mappingType);
      ClusterInfo getClusterInfo (in long mappingId, in long mappingType, in long clusterType);
  };
};
