module SpiderCorba
{
  interface SpiderDefine
  {
     struct VideoInfo {
          wstring videoId;
          wstring title;
          wstring tags;
          wstring description;
          wstring thumbnail;
          wstring vDownloadPath;
          wstring vRenderPath;
          long mappingId;
          long processStatus;
          long license;
    };
  };

  interface UploadSide : SpiderDefine
  {
        struct UploadConfig
        {
            wstring vTitleTemp;
            wstring vDescTemp;
            wstring vTagsTemp;
            boolean enableTitle;
            boolean enableDes;
            boolean enableTags;
        };
		boolean createUploadTimer(in wstring timerId, in wstring uploadClusterId);
		boolean modifyUploadTimer(in wstring timerId, in wstring uploadClusterId, in long synStatus, in UploadConfig uploadCfg);
		boolean deleteUploadTimer(in wstring timerId, in wstring uploadClusterId);
        boolean createUploadJob(in long jobId, in VideoInfo vInfo, in UploadConfig uploadCfg);
        boolean deleteUploadJob(in long jobId, in wstring uploadClusterId);
  };

  interface AgentSide : SpiderDefine
  {
    struct AuthenInfo
    {
      wstring userName;
      wstring apiKey;
      wstring clientSecret;
      wstring clientId;
    };

    struct ClusterInfo
    {
      wstring clusterIp;
      wstring userName;
      wstring password;
    };

    void onDownloadStartup(in wstring appId);
    void onRenderStartup(in wstring appId);
    void onUploadStartup(in wstring appId);
    long long getLastSyncTime(in long mappingId);
    void updateLastSyntime(in long mappingId, in long long lastSyncTime);
    void updateDownloadedVideo(in VideoInfo vInfo);
    void updateRenderedVideo(in long jobId, in long processStatus, in wstring vRenderPath);
    void updateUploadedVideo (in long jobId);
    wstring getMonitorChannelId(in long mappingId);
    ClusterInfo getClusterInfo(in long clusterType, in long mappingId);
    AuthenInfo getAuthenInfo(in long mappingId);
  };
};